{"version":3,"sources":["assets/background.png","js/components/Background.js","js/components/Header.js","js/data/data-location.js","js/data/fetchData.js","js/hooks/useApi.js","js/components/LoadableText.js","js/components/StatusCard.js","js/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Background","_ref","children","react_default","a","createElement","className","style","backgroundImage","concat","backgroundUrl","Header","urls","status","url","mock","jsonData","server-status","FETCH_MODES","SELECTED_FETCH_MODE","fetchMockData","mockfileName","Promise","resolve","reject","setTimeout","fetchRealData","fetch","then","response","ok","json","Error","text","fetchData","dataLocation","location","urlKey","useApi","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","errors","setErrors","useEffect","result","catch","LoadableText","ressource","StatusCard","_useApi","is_online","components_LoadableText","ip","port","App","components_Background","components_Header","components_StatusCard","Boolean","window","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0543e4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.824c31a5.png\";","import React from 'react'\nimport backgroundUrl from 'assets/background.png'\n\nconst Background = ({ children }) => (\n  <div\n    className=\"Background__container\"\n    style={{ backgroundImage: `url(${backgroundUrl})` }}\n  >\n    {children}\n  </div>\n)\n\nexport default Background\n","import React from 'react'\n\nconst Header = () => {\n  return (\n    <div className=\"Header__container\">\n      <h1 className=\"Header--title\">Server News</h1>\n    </div>\n  )\n}\n\nexport default Header\n","export const urls = {\n  status: () => ({\n    url: 'https://mtxserv.com/api/v1/viewers/game?type=minecraft&ip=game-fr-10.mtxserv.com&port=27180',\n    mock: 'server-status'\n  })\n}\n","import { urls } from './data-location'\nimport serverStatus from './mock/server-status.json'\n\nconst jsonData = {\n  'server-status': serverStatus\n}\n\nconst FETCH_MODES = {\n  mock: 'mock',\n  url: 'url'\n}\n\nconst SELECTED_FETCH_MODE = FETCH_MODES.mock\n\nconst fetchData = dataLocation => {\n  const location = urls[dataLocation.urlKey](dataLocation)\n\n  switch (SELECTED_FETCH_MODE) {\n    case FETCH_MODES.mock:\n      return fetchMockData(location.mock)\n    case FETCH_MODES.url:\n      return fetchRealData(location.url)\n    default:\n      return Promise.resolve()\n  }\n}\n\nconst fetchMockData = mockfileName => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(jsonData[mockfileName])\n    }, 1000)\n  })\n}\n\nconst fetchRealData = url => {\n  return fetch(url).then(response => {\n    if (response.ok) {\n      return response.json()\n    }\n\n    throw new Error(response.text)\n  })\n}\n\nexport default fetchData\n","import { useState, useEffect } from 'react'\nimport fetchData from 'js/data/fetchData'\n\nconst useApi = dataLocation => {\n  const [data, setData] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [errors, setErrors] = useState(null)\n\n  useEffect(() => {\n    const loadData = () => {\n      setLoading(true)\n      setErrors(null)\n      return fetchData(dataLocation)\n        .then(result => {\n          setData(result)\n          setLoading(false)\n        })\n        .catch(errors => {\n          setLoading(false)\n          setErrors(errors)\n        })\n    }\n\n    loadData()\n  }, [dataLocation])\n\n  return {\n    data,\n    loading,\n    errors\n  }\n}\n\nexport default useApi\n","import React from 'react'\n\nconst LoadableText = ({ loading, children }) =>\n  loading ? <div className=\"loading-text\" /> : <span>{children}</span>\n\nexport default LoadableText\n","import React from 'react'\nimport useApi from 'js/hooks/useApi'\n\nimport LoadableText from 'js/components/LoadableText'\n\nconst ressource = { urlKey: 'status' }\n\nconst StatusCard = () => {\n  let { data, loading } = useApi(ressource)\n  if (!data) {\n    data = {}\n  }\n\n  return (\n    <div className=\"StatusCard__wrapper\">\n      <div\n        className={`StatusCard__container ${loading ? 'loading' : ''} ${\n          data.is_online ? 'online' : 'offline'\n        }`}\n      >\n        <div className=\"StatusCard--title\">\n          <LoadableText loading={loading}>\n            {data.ip}:{data.port}\n          </LoadableText>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StatusCard\n","import React from 'react'\nimport Background from './components/Background'\nimport Header from './components/Header'\nimport StatusCard from './components/StatusCard'\n\nconst App = () => {\n  return (\n    <Background>\n      <Header />\n      <StatusCard />\n    </Background>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'sass/index.scss'\nimport App from 'js/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('react-app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}